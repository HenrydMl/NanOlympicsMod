 params{
	// Path to the sample description file / the csv
 	samples = "/home/ulb/mlg/hdmarmol/dataInputs/IVT1_testsample.csv"

 	// This must match one of the conditions in the samples file
	test_condition = "WT"

	// Path to a folder where to store results
	resultsDir = "/globalscratch/ulb/mlg/hdmarmol/nanolympics/results2"

	// FAST5 slot containing the basecalled bases - WARNING: THE SECOND PARAMETER IS REDUNDANT
	fast5_slot = "Basecall_1D_000"
	fast5_slot_id = "000"

	// FAST5 slot containing the resquiggle data
	tombo_slot = "RawGenomeCorrected_000"
	tombo_subslot = "BaseCalled_template"

	// Path to the transcriptome fasta
	transcriptome_fasta = "/globalscratch/ulb/mlg/hdmarmol/nanolympics/startingfiles/chr1/chr1_transcriptome.fa"
	
	// Path to the transcriptome fasta index - WARNING: THIS SHOULD BE CREATED IN A DEDICATED PROCESS
	transcriptome_fai = "/globalscratch/ulb/mlg/hdmarmol/nanolympics/startingfiles/chr1/chr1_transcriptome.fa.fai"

	// Path to the genome fasta
	genome_fasta = "/globalscratch/ulb/mlg/hdmarmol/nanolympics/startingfiles/chr1/chr1.fa"
	
	// Path to the genome fasta index - WARNING: THIS SHOULD BE CREATED IN A DEDICATED PROCESS
	genome_fai = "/globalscratch/ulb/mlg/hdmarmol/nanolympics/startingfiles/chr1/chr1.fa.fai"

	// Gene to transcripts file for Nanom6A - WARNING: THIS SHOULD BE CREATED IN A DEDICATED PROCESS
	genes2transcripts = "/home/ulb/mlg/hdmarmol/dataInputs/dummy_genes2transcripts.txt"

	// Bed files
	transcriptomebed = "/globalscratch/ulb/mlg/hdmarmol/nanolympics/startingfiles/chr1/chr1_transcriptome_fixed.bed"
	genesbed = "/globalscratch/ulb/mlg/hdmarmol/nanolympics/startingfiles/chr1/chr1_genes_fixed.bed"
	genomebed = "/home/ulb/mlg/hdmarmol/dataInputs/eligos_genomes.bed"

	// Gtf file
	gtf = "/globalscratch/ulb/mlg/hdmarmol/nanolympics/startingfiles/chr1/chr1.gtf"

	// nanom6A probabilities
	nanom6AP = "0.5 0.6 0.7 0.8 0.9 0.99"

	// yanocomp FDR threshold
	yanocompFDR = 1

	// differr FDR threshold
	differrFDR = 1

	// drummer Pvalue threshold
	drummerPval = 1

	// epinanoError threshold sum of errors
	epinanoErrorSumErr = 0

	// epinanoError threshold residuals
	epinanoErrorResiduals = 3
	
	// Path to post-processing R script
	postprocessingScript = "/home/ulb/mlg/hdmarmol/maestriNanolympicMod/myNanolympics/NanOlympicsMod/Scripts/postprocessing.R"
	
	// Path to statystical analysis R script
        statisticalAnalysis = "/home/ulb/mlg/hdmarmol/maestriNanolympicMod/myNanolympics/NanOlympicsMod/Scripts/statistical_analysis.R"

	// Setting of threshold that each tool is going to use for the detection of m6A site
	threshold = "relaxed"
	
	// Bin length
	binLength = 50

	// File with set of m6A positive sites 
	peaksfile = "/home/ulb/mlg/hdmarmol/dataInputs/dummy_peaksfile.txt"

	// Flags to select which process to run
	multi2single = true
	fastq = true
	minimap2 = true
	minimap2Merge = true
	tombo1 = true
	tombo2 = true
	tombo3 = true
	nanom6a = false
	differr = true
	eligos = false
	mines = true
	dena = true
	epinanoSVM = true
	epinanoError = true
	nanodoc = false
	drummer = false
	nanopolish1 = true
	xpore = true
	nanocompore1 = true
	nanocompore2 = true
	m6anet1 = true
	m6anet2 = true
	yanocomp1 = true
	yanocomp2 = true
	postprocessing = true
}

singularity {
	enabled = true
	autoMounts = false
	cacheDir = "/globalscratch/ulb/mlg/hdmarmol/caches/"
}

tower {
	enabled = false
	endpoint = '-'
	accessToken = 'nextflowTowerToken'
}

process{
	cpus = 1
	executor = 'slurm'
	queue = 'batch'
	perJobMemLimit = true
        containerOptions = '--bind /globalscratch/:/globalscratch/'

	withName:multi2single{
		container = 'bproject/ont_fast5_api:v1'
		time = '10h'
		cpus = { params.multi2single ? 6 : 1 }
		memory = { params.multi2single ? 60.GB + (2.GB * (task.attempt-1)) : 1.GB }
		errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
		maxRetries = 3
	}
	withName:fastq{
		container = 'biocontainers/poretools:v0.6.0dfsg-3-deb_cv1'
		time = '1h'
		cpus = { params.fastq ? 6 : 1 }
		memory = { params.fastq ? 10.GB + (2.GB * (task.attempt-1)) : 1.GB }
		errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
		maxRetries = 3
	}
	withName:minimap2{
		container = 'bproject/minimap2:v1'
		time = '10h'
		cpus = { params.minimap2 ? 6 : 1 }
		memory = { params.minimap2 ? 10.GB + (2.GB * (task.attempt-1)) : 1.GB }
		errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
		maxRetries = 3
	}
	withName:minimap2Merge{
		container = 'bproject/minimap2:v1'
		time = '10h'
		cpus = { params.minimap2Merge ? 6 : 1 }
		memory = { params.minimap2Merge ? 60.GB + (2.GB * (task.attempt-1)) : 1.GB }
		errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
		maxRetries = 3
	}
	withName:tombo1{
		container = 'bproject/tombo:v4'
		time='48h'
		cpus = { params.tombo1 ? 5 : 1 }
		memory = { params.tombo1 ? 64.GB + (4.GB * (task.attempt-1)) : 1.GB }
		errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
		maxRetries = 3
	}
	withName:tombo2{
		container = 'bproject/tombo:v4'
		time = '48h'
		cpus = { params.tombo2 ? 6 : 1 }
		memory = { params.tombo2 ? 64.GB + (2.GB * (task.attempt-1)) : 1.GB }
		errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
		maxRetries = 3
	}
	withName:tombo3{
		container = 'bproject/tombo:v4'
		time = '48h'
		cpus = { params.tombo3 ? 6 : 1 }
		memory = { params.tombo3 ? 64.GB + (2.GB * (task.attempt-1)) : 1.GB }
		errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
		maxRetries = 3
	}
	withName:nanom6a{
		container = 'bproject/nanom6a:v2'
		time = '48h'
		cpus = { params.nanom6a ? 6 : 1 }
		memory = { params.nanom6a ? 120.GB + (2.GB * (task.attempt-1)) : 1.GB }
		errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
		maxRetries = 3
	}
	withName:differr{
		container = 'bproject/differr:v1'
		time = '48h'
		cpus = { params.differr ? 6 : 1 }
		memory = { params.differr ? 60.GB + (2.GB * (task.attempt-1)) : 1.GB }
		errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
		maxRetries = 3
	}
	withName:eligos{
		container = 'bproject/eligos:v1'
		time = '48h'
		cpus = { params.eligos ? 6 : 1 }
		memory = { params.eligos ? 10.GB + (2.GB * (task.attempt-1)) : 1.GB }
		errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
		maxRetries = 3
	}
	withName:mines{
		container = 'bproject/mines:v1'
		time = '48h'
		cpus = { params.mines ? 6 : 1 }
		memory = { params.mines ? 60.GB + (2.GB * (task.attempt-1)) : 1.GB }
		errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
		maxRetries = 3
	}
	withName:dena{
		container = 'bproject/dena:v1'
		time = '48h'
		cpus = { params.dena ? 6 : 1 }
		memory = { params.dena ? 120.GB + (2.GB * (task.attempt-1)) : 1.GB }
		errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
		maxRetries = 3
	}
	withName:epinanoSVM{
		container = 'bproject/epinano:v1'
		time = '48h'
		cpus = { params.epinanoSVM ? 6 : 1 }
		memory = { params.epinanoSVM ? 120.GB + (2.GB * (task.attempt-1)) : 1.GB }
		errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
		maxRetries = 3
	}
	withName:epinanoError{
		container = 'bproject/epinano:v1'
		time = '48h'
		cpus = { params.epinanoError ? 6 : 1 }
		memory = { params.epinanoError ? 15.GB + (2.GB * (task.attempt-1)) : 1.GB }
		errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
		maxRetries = 3
	}
	withName:nanodoc{
		container = 'bproject/nanodoc:v2'
		time = '48h'
		cpus = { params.nanodoc ? 6 : 1 }
		memory = { params.nanodoc ? 20.GB + (2.GB * (task.attempt-1)) : 1.GB }
		errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
		maxRetries = 3
	}
	withName:drummer{
		container = 'bproject/drummer:v1'
		time = '48h'
		cpus = { params.drummer ? 16 : 1 }
		memory = { params.drummer ? 60.GB + (2.GB * (task.attempt-1)) : 1.GB }
		errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
		maxRetries = 3
	}
	withName:nanopolish1{
		container = 'bproject/nanopolish:v1'
		cpus = { params.nanopolish1 ? 6 : 1 }
		memory = { params.nanopolish1 ? 5.GB + (2.GB * (task.attempt-1)) : 1.GB }
		errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
		maxRetries = 3
	}
	withName:xpore1{
		container = 'bproject/xpore:v1'
		time = '48h'
		cpus = { params.xpore ? 3 : 1 }
		memory = { params.xpore ? 60.GB + (2.GB * (task.attempt-1)) : 1.GB }
		errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
		maxRetries = 3
	}
	withName:xpore2{
		container = 'bproject/xpore:v1'
		cpus = { params.xpore ? 3 : 1 }
		memory = { params.xpore ? 5.GB + (2.GB * (task.attempt-1)) : 1.GB }
		errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
		maxRetries = 3
		time = '48h'
	}
	withName:m6anet1{
		container = 'bproject/m6anet:v1'
		time = '48h'
		cpus = { params.m6anet1 ? 3 : 1 }
		memory = { params.m6anet1 ? 60.GB + (2.GB * (task.attempt-1)) : 1.GB }
		errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
		maxRetries = 3
	}
	withName:m6anet2{
		container = 'bproject/m6anet:v1'
		time = '48h'
		cpus = { params.m6anet2 ? 3 : 1 }
		memory = { params.m6anet2 ? 60.GB + (2.GB * (task.attempt-1)) : 1.GB }
		errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
		maxRetries = 3
	}
	withName:nanocompore1{
		container = 'bproject/nanocompore:v1'
		time = '48h'
		cpus = { params.nanocompore1 ? 7 : 1 }
		memory = { params.nanocompore1 ? 60.GB + (2.GB * (task.attempt-1)) : 1.GB }
		errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
		maxRetries = 3
	}
	withName:nanocompore2{
		container = 'bproject/nanocompore:v1'
		time = '48h'
		cpus = { params.nanocompore2 ? 7 : 1 }
		memory = { params.nanocompore2 ? 60.GB + (2.GB * (task.attempt-1)) : 1.GB }
		errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
		maxRetries = 3
	}
	withName:yanocomp1{
		container = 'bproject/yanocomp:v1'
		time = '48h'
		cpus = { params.yanocomp1 ? 3 : 1 }
		memory = { params.yanocomp1 ? 120.GB + (2.GB * (task.attempt-1)) : 1.GB }
		errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
		maxRetries = 3
	}
	withName:yanocomp2{
		container = 'bproject/yanocomp:v1'
		time = '48h'
		cpus = { params.yanocomp2 ? 3 : 1 }
		memory = { params.yanocomp2 ? 120.GB + (2.GB * (task.attempt-1)) : 1.GB }
		errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
		maxRetries = 3
	}
	withName:postprocessing{
		container = 'bproject/postprocessing:v3'
		time = '48h'
		cpus = { params.postprocessing ? 3 : 1 }
		memory = { params.postprocessing ? 120.GB + (2.GB * (task.attempt-1)) : 1.GB }
		errorStrategy = { task.exitStatus == 130 ? 'retry' : 'terminate' }
		maxRetries = 3
	}

}
